import React from 'react';
import './App.css';
import { Formik } from 'formik';

const questions = [
  {
    question: 'K ƒçemu p≈Øvodnƒõ slou≈æil kr√°sn√Ω kamenn√Ω d≈Øm na prvn√≠m obr√°zku?',
    choices: [
      { option: 'A', answer: 'Jednalo se o plyn√°rnu na acetylenov√Ω plyn.' },
      { option: 'B', answer: 'Letn√≠ s√≠dlo podiv√≠nsk√©ho majitele.' },
    ],
  },
  {
    question: 'V jak√© obci se nach√°z√≠ "hobit√≠" vina≈ôsk√© skl√≠pky?',
    choices: [
      { option: 'A', answer: 'Bo≈ôetice' },
      { option: 'B', answer: 'Vrbice' },
    ],
  },
  {
    question: 'Jak se jmenuje bizarn√≠ balvan na obr√°zku?',
    choices: [
      { option: 'A', answer: 'Tch√Ωnina zadnice' },
      { option: 'B', answer: 'ƒé√°blova prdel' },
    ],
  },
  {
    question: 'M≈Ø≈æete se v Edmundovƒõ soutƒõsce plavit na vlastn√≠ lodi?',
    choices: [
      { option: 'A', answer: 'Ne, pouze s m√≠stn√≠m p≈ôevozn√≠kem.' },
      { option: 'B', answer: 'Ano ' },
    ],
  },
  {
    question: 'Je ledov√° Jeskynƒõ v√≠l v ƒåesk√©m ≈†v√Ωcarsku celoroƒçnƒõ p≈ô√≠stupn√°?',
    choices: [
      { option: 'A', answer: 'Ano' },
      { option: 'B', answer: 'Ne' },
    ],
  },
  {
    question: 'Z√°mek Hrub√° Sk√°la, zalo≈æil v 14. stol. jako hrad:',
    choices: [
      { option: 'A', answer: 'Rod Vald≈°tejn≈Ø ' },
      { option: 'B', answer: 'Rod Smi≈ôick√Ωch' },
    ],
  },
  {
    question: 'Ze spir√°lov√© rozhledny v Kobyl√≠ se pokoch√°te v√Ωhledem:',
    choices: [
      { option: 'A', answer: 'na vinohrady Slov√°cka' },
      { option: 'B', answer: 'na vinohrady P√°lavy' },
    ],
  },
  {
    question: 'P≈ôehrada Les Kr√°lovstv√≠ stoj√≠ na ≈ôece:',
    choices: [
      { option: 'A', answer: 'Orlici' },
      { option: 'B', answer: 'Labi' },
    ],
  },
  {
    question: 'B√Ωval√Ω nacistick√Ω d≈Øl a t√°bor pro zajatce Rolava se nach√°z√≠:',
    choices: [
      { option: 'A', answer: 'V Karlovarsk√©m kraji' },
      { option: 'B', answer: 'V Libereck√©m kraji' },
    ],
  },
  {
    question:
      'Fantastick√© v√Ωhledy na p≈ô√≠rodu ƒåesk√©ho ≈†v√Ωcarska si vychutn√°te z:',
    choices: [
      { option: 'A', answer: 'Vilem√≠niny vyhl√≠dky' },
      { option: 'B', answer: 'Mariiny vyhl√≠dky' },
    ],
  },
  {
    question: 'Kostel na jednom z ostr≈Øvk≈Ø Novoml√Ωnsk√© n√°dr≈æe se jmenuje:',
    choices: [
      { option: 'A', answer: 'kostela sv. Linharta' },
      { option: 'B', answer: 'kostela sv. Jana Nepomuck√©ho' },
    ],
  },
  {
    question: 'Skaln√≠ reli√©fy ƒåertovy hlavy jsou vysok√©:',
    choices: [
      { option: 'A', answer: '6 metr≈Ø' },
      { option: 'B', answer: '9 metr≈Ø' },
    ],
  },
];

class Questions extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      questions: [],
    };
  }

  userSelection(length) {
    const initialValues = [];
    for (let i = 0; i < length; i++) {
      initialValues.push({ question: i, answer: '' });
    }

    return initialValues;
  }

  componentDidMount() {
    // Fetch all the questions and set state
    this.setState({ questions });
  }

  render() {
    const { questions } = this.state;
    const userSelection = { answers: this.userSelection(questions.length) };
    console.log(userSelection);

    return (
      <Formik enableReinitialize={true} initialValues={userSelection}>
        {({ values, handleBlur, handleChange, handleSubmit, isSubmitting }) => (
          <form onSubmit={handleSubmit}>
            {questions.map((q, index) => (
              <div className="card" key={index}>
                {/* <div className="card-header">H√°dej</div> */}
                <div className="card-body">
                  <h6 className="card-title">{q.question}</h6>
                  <div className="question-choices px-2">
                    {q.choices.map((choice) => (
                      <div className="form-check" key={choice.option}>
                        <input
                          type="radio"
                          id={choice.option}
                          className="form-check-input"
                          name={`answers[${index}].answer`}
                          value={choice.option}
                          checked={
                            values.answers && values.answers[index]
                              ? values.answers[index].answer === choice.option
                              : false
                          }
                          onChange={handleChange}
                          onBlur={handleBlur}
                        />
                        <label
                          className="form-check-label clickable"
                          htmlFor={choice.option}
                        >
                          <span className="mr-2">{choice.option} )</span>{' '}
                          {choice.answer}
                        </label>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            ))}
            {/* <pre>{JSON.stringify(values, null, 2)}</pre> */}
            <div className="tlacitko">
              <button
                type="submit"
                className="btn btn-primary"
                disabled={isSubmitting}
                onClick={() => {
                  const odpovedi = [
                    'A',
                    'B',
                    'B',
                    'A',
                    'A',
                    'A',
                    'B',
                    'B',
                    'A',
                    'B',
                    'A',
                    'B',
                  ];
                  let vysledek = 0;
                  for (let i = 0; i < odpovedi.length; i++) {
                    if (values.answers[i].answer === odpovedi[i]) {
                      vysledek++;
                    }
                  }
                  console.log(vysledek);
                  alert('Z√≠skali jste celkem ' + vysledek + ' bod≈Ø üéâ');
                }}
              >
                V√Ωsledek
              </button>
            </div>
          </form>
        )}
      </Formik>
    );
  }
}

function App() {
  return (
    <div>
      <Questions />
    </div>
  );
}

export default App;

// zdroje kodu:
// https://formik.org/docs/overview
// https://codesandbox.io/s/gifted-brown-xemxi?file=/src/App.js:2405-2429
